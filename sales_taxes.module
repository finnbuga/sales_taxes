<?php

/**
 * Implements hook_menu().
 */
function sales_taxes_menu() {
  $items = array();

  $items['sales_taxes'] = array(
    'title' => 'Sales Taxes',
    'description' => 'Displays the receipt details for a shopping basket',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sales_taxes_form'),
    'access callback' => TRUE
  );

  return $items;
}

/**
 * Implements a form using the Form API.
 */
function sales_taxes_form($form, &$form_state) {

 $form['shopping_basket'] = array(
    '#type' => 'textfield',
    '#title' => 'Your shopping basket',
    '#size' => 100,
    '#maxlength' => 1000,
    '#required' => TRUE,
  );

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Get receipt'),
  );

  return $form;
}

/**
 * Implements validation using the Form API.
 *
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state
 *   during processing.
 */
function sales_taxes_form_validate($form, &$form_state) {
  $products = sales_taxes_extract_products($form_state['values']['shopping_basket']);
  if (empty($products)) {
    form_set_error('shopping_basket', t('Please enter a valid Shopping basket'));
  }
}

/**
 * Implements submission using the Form API.
 *
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state
 *   during processing.
 */
function sales_taxes_form_submit($form, &$form_state) {
  $products = sales_taxes_extract_products($form_state['values']['shopping_basket']);

  drupal_set_message(sales_taxes_get_receipt($products));
}

/**
 * Gets the receipt.
 *
 * Puts together the receipt for the given products.
 * It has the following format:
 * 1 imported box of chocolates: 10.50 1 imported bottle of perfume: 54.65 Sales Taxes: 7.65 Total: 65.15
 *
 * @param  sales_taxes_product[] $products The products
 * @return string the receipt in the specific format
 */
function sales_taxes_get_receipt($products) {
  $receipt = '';

  foreach($products as $product) {
    $receipt .= $product->quantity . ' ';
    if ($product->imported) {
      $receipt .= 'imported ';
    }
    $receipt .= $product->name . ': ';
    $receipt .= number_format($product->price + $product->get_total_sales_tax(), 2) . ' ';
  }

  $sales_tax = 0;
  $total = 0;
  foreach($products as $product) {
    $sales_tax += $product->quantity * $product->get_total_sales_tax();
    $total     += $product->quantity * ($product->price + $product->get_total_sales_tax());
  }
  $receipt .= 'Sales taxes: ' . number_format($sales_tax, 2);
  $receipt .= ' Total: ' . number_format($total, 2);

  return $receipt;
}

/**
 * Extract products form the Shopping basket.
 *
 * @param  string $shopping_basket The shopping basket. It has the following format:
 *         '1 imported box of chocolates at 10.00 1 imported bottle of perfume at 47.50'
 * @return sales_taxes_product[] A list with the products
 */
function sales_taxes_extract_products($shopping_basket) {
  $products = [];

  preg_match_all('/(\d+) (imported )*([\w ]+) at (\d+\.\d+)[ ]*/', $shopping_basket, $matches);
  $total_products = sizeof($matches[0]);

  for ($i=0; $i<$total_products; $i++) {
    $quantity = $matches[1][$i];
    $imported = !empty($matches[2][$i]);
    $product_name = $matches[3][$i];
    $price = $matches[4][$i];

    $products[$i] = new sales_taxes_product($product_name, $price, $imported, $quantity);
  }

  return $products;
}
