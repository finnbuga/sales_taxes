<?php

/**
 * Implements hook_menu().
 */
function sales_taxes_menu() {
  $items = array();

  $items['sales_taxes'] = array(
    'title' => 'Sales Taxes',
    'description' => 'Displays the receipt details for a shopping basket',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sales_taxes_form'),
    'access callback' => TRUE
  );

  return $items;
}

/**
 * Form for a receipt
 *
 * See Form API.
 *
 * @return mixed[] a Form API array to be processed by drupal_get_form().
 */
function sales_taxes_form($form, &$form_state) {

 $form['shopping_basket'] = array(
    '#type' => 'textfield',
    '#title' => 'Your shopping basket',
    '#size' => 100,
    '#maxlength' => 1000,
    '#required' => TRUE,
  );

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Get receipt'),
  );

  return $form;
}

/**
 * Implements validation from the Form API.
 *
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state
 *   during processing.
 */
function sales_taxes_form_validate($form, &$form_state) {
  $shopping_list = sales_taxes_get_shopping_list($form_state['values']['shopping_basket']);
  if (empty($shopping_list)) {
    form_set_error('shopping_basket', t('Please enter a valid Shopping basket'));
  }
}

/**
 * Implements submission from the Form API.
 *
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state
 *   during processing.
 */
function sales_taxes_form_submit($form, &$form_state) {
  $shopping_list = sales_taxes_get_shopping_list($form_state['values']['shopping_basket']);

  $message = sales_taxes_get_receipt($shopping_list);
  drupal_set_message("Here's your shopping list");
}

/**
 * Extract the shopping list
 *
 * @param  string $shopping_basket The shopping basket containing all items
 * @return string[] A list with the individual items
 */
function sales_taxes_get_shopping_list($shopping_basket) {
  preg_match_all('/\d+ [\w ]+ at \d+\.\d+[ ]*/', $shopping_basket, $matches);
  return $matches[0];
}

function sales_taxes_get_receipt($shopping_list) {
  $products = sales_taxes_extract_products($shopping_list);
}

/**
 * Extract products from the shopping list
 *
 * @param  string $shopping_list Data about an individual product in the following format:
 *                               [quantity] [product name] at [price]
 * @return sales_taxes_product[] A list with the products
 */
function sales_taxes_extract_products($shopping_list) {
  $products = [];

  foreach ($shopping_list as $item) {
    preg_match('/\d+/', $item, $match);
    $quantity = $match[0];
    preg_match('/\d+ ([\w ]+) at/', $item, $match);
    $product_name = $match[1];
    preg_match('/.+ at (\d+\.\d+)/', $item, $match);
    $price = $match[1];

    $product = new sales_taxes_product($product_name, $price, false, $quantity);
    $products[] = $product;
  }

  return $products;
}
